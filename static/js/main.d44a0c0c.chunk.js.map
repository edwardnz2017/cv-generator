{"version":3,"sources":["components/welcome.jsx","components/personal-details.jsx","components/education-details.jsx","components/work-experience.jsx","components/cv-page.jsx","App.js","serviceWorker.js","index.js"],"names":["Welcome","props","id","onClick","onWelcome","Personal","onSubmit","type","name","required","placeholder","Education","htmlFor","className","Work","Cv","enteredDetails","email","number","education","qualification","school","fromDate","toDate","work","position","company","App","switchPersonalDetails","setState","welcomePage","personalDetails","handlePersonals","e","educationDetails","target","enterName","value","enterEmail","enterNumber","handleEducation","workExperience","enterQualification","enterSchool","handleWork","cvPage","enterJobPosition","enterCompany","state","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d44a0c0c.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport '../css/welcome.css';\n\nconst Welcome = (props) => {\n    return ( \n    <div id=\"welcome-div\">\n        <h1>Let's get started creating your resume!</h1>\n        <button id=\"start-button\" onClick={props.onWelcome}><span>Start</span></button>\n    </div> \n    );\n}\n \nexport default Welcome;","import React, { Component } from 'react';\nimport '../css/personal-details.css'\n\nconst Personal = (props) => {\n  return (\n    <form id=\"form-div\" onSubmit={props.onSubmit}>\n      <input type=\"text\" name=\"enterName\" required placeholder=\"Name\"/>\n      <input type=\"email\" name=\"enterEmail\" required placeholder=\"E-mail\"/>\n      <input type=\"tel\" name=\"enterNumber\" required placeholder=\"Phone Number\"/>\n      <button id=\"next-button\" type=\"submit\"><span>Next</span></button>\n    </form> \n  );\n}\n \nexport default Personal;","import React from 'react';\nimport '../css/education-details.css'\n\nconst Education = (props) => {\n  return (\n    <form id=\"form-div\" onSubmit={props.onSubmit}>\n      <input type=\"text\" name=\"enterQualification\" required placeholder=\"Qualification\" />\n      <input type=\"text\" name=\"enterSchool\" required placeholder=\"School Name\" />\n      <div>\n        <label htmlFor=\"fromDate\">\n          From:         \n          <input type=\"date\" name=\"fromDate\" placeholder=\"YYYY/MM/DD\" required className=\"date-input\"/>\n        </label>\n        <label htmlFor=\"toDate\">\n          To:\n          <input type=\"date\" name=\"toDate\" placeholder=\"YYYY/MM/DD\" required className=\"date-input\"/>\n        </label>\n      </div>\n      <button id=\"next-button\" type=\"submit\"><span>Next</span></button>\n    </form>\n  );\n}\n\nexport default Education;","import React from 'react';\nimport '../css/work-experience.css'\n\nconst Work = (props) => {\n    return (\n        <form id=\"form-div\" onSubmit={props.onSubmit}>\n          <input type=\"text\" name=\"enterJobPosition\" required placeholder=\"Job Position\" />\n          <input type=\"text\" name=\"enterCompany\" required placeholder=\"Company\" />\n          <div>\n            <label htmlFor=\"fromDate\">\n              From:         \n              <input type=\"date\" name=\"fromDate\" placeholder=\"YYYY/MM/DD\" required className=\"date-input\"/>\n            </label>\n            <label htmlFor=\"toDate\">\n              To:\n              <input type=\"date\" name=\"toDate\" placeholder=\"YYYY/MM/DD\" required className=\"date-input\"/>\n            </label>\n          </div>\n          <button id=\"next-button\" type=\"submit\"><span>Next</span></button>\n        </form>\n      );\n}\n \nexport default Work;","import React from 'react';\nimport '../css/cv-page.css'\n\nconst Cv = (props) => {\n    return ( \n    <main>\n        <div id=\"main-div\">\n            <h2>Personal Details</h2>\n            {props.enteredDetails.name}\n            <br/>\n            {props.enteredDetails.email}\n            <br/>\n            {props.enteredDetails.number}\n\n            <h2>Education</h2>\n            {props.education.qualification}\n            <br/>\n            {props.education.school}\n            <br/>\n            {props.education.fromDate} -\n            {props.education.toDate}\n\n            <h2>Work Experience</h2>\n            {props.work.position}\n            <br/>\n            {props.work.company}\n            <br/>\n            {props.work.fromDate} -\n            {props.work.toDate}\n        </div> \n    </main>);\n}\n \nexport default Cv;","import React, { Component } from 'react';\nimport Welcome from './components/welcome';\nimport Personal from './components/personal-details';\nimport Education from './components/education-details';\nimport Work from './components/work-experience';\nimport Cv from './components/cv-page';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      welcomePage: true,\n      personalDetails: false,\n      educationDetails: false,\n      workExperience: false,\n      cvPage: false,\n    };\n  }\n\n  switchPersonalDetails = () => {\n    this.setState({ welcomePage: false, personalDetails: true });\n  };\n\n  handlePersonals = (e) => {\n    this.setState({\n      personalDetails: false,\n      educationDetails: true,\n      enteredDetails: {\n        name: e.target.enterName.value,\n        email: e.target.enterEmail.value,\n        number: e.target.enterNumber.value,\n      },\n    });\n  };\n\n  handleEducation = (e) => {\n    this.setState({\n      educationDetails: false,\n      workExperience: true,\n      education: {\n        qualification: e.target.enterQualification.value,\n        school: e.target.enterSchool.value,\n        fromDate: e.target.fromDate.value,\n        toDate: e.target.toDate.value,\n      },\n    });\n  };\n\n  handleWork = (e) => {\n    this.setState({\n      workExperience: false,\n      cvPage: true,\n      work: {\n        position: e.target.enterJobPosition.value,\n        company: e.target.enterCompany.value,\n        fromDate: e.target.fromDate.value,\n        toDate: e.target.toDate.value,\n      },\n    });\n  };\n\n  render() {\n    if (this.state.welcomePage) {\n      return <Welcome onWelcome={this.switchPersonalDetails} />;\n    } else if (this.state.personalDetails) {\n      return <Personal onSubmit={this.handlePersonals} />;\n    } else if (this.state.educationDetails) {\n      return <Education onSubmit={this.handleEducation} />;\n    } else if (this.state.workExperience) {\n      return <Work onSubmit={this.handleWork} />;\n    } else if (this.state.cvPage) {\n      return <Cv {...this.state} />;\n    }\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}